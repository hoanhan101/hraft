package mapreduce

import (
	"encoding/json"
	"hash/fnv"
	"io/ioutil"
	"log"
	"os"
)

// doMap manages one map task: it should read one of the input files
// (inFile), call the user-defined map function (mapF) for that file's
// contents, and partition mapF's output into nReduce intermediate files.
func doMap(
	jobName string, // the name of the MapReduce job
	mapTask int, // which map task this is
	inputFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)

	// mapF() is the map function provided by the application.
	// The first argument should be the input file name,
	// though the map function typically ignores it.
	// The second argument should be the entire input file contents.
	// mapF() returns a slice containing the key/value pairs for reduce
	mapF func(filename string, contents string) []KeyValue,
) {
	// Read the input file.
	data, err := ioutil.ReadFile(inputFile)
	if err != nil {
		log.Fatal(err)
		return
	}

	// Call mapF function for that file's content.
	kvs := mapF(inputFile, string(data))

	// In order to do partition mapF's output into nReduce intermediate files,
	// First, make an encoder slice with the number of reduce tasks.
	var encoders = make([]*json.Encoder, nReduce)
	var fd *os.File = nil

	// Then open a intermediate file for each reduce task.
	for i := 0; i < nReduce; i++ {
		// The file name includes both the map task number and the reduce task number.
		// Use the filename generated by reduceName(jobName, mapTask, r)
		// as the intermediate file for reduce task r.
		fileName := reduceName(jobName, mapTask, i)

		// Create a file if none exists, open it write-only, append while writing.
		fd, err = os.OpenFile(fileName, os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0600)
		defer fd.Close()
		if err != nil {
			log.Fatal(err)
			return
		}

		// Call an encoder
		encoders[i] = json.NewEncoder(fd)
	}

	// Call ihash() on each key, mod nReduce, to pick r for a key/value pair.
	for _, kv := range kvs {
		r := ihash(kv.Key) % nReduce
		err = encoders[r].Encode(kv)
		if err != nil {
			log.Fatal(err)
			return
		}
	}
}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
